Models
-each model is a class
-each model represents a table in the database
--not limited to just table representation, but anything that manipulates data
-a simple model class
--class Item extends AppModel {}
--provides the developer with the ability to create queries and save and delete data
--all made possible because of inheritance
---Item->AppModel->Model
-models have mani possibilities
--in this course we will cover a few of those, including:
---data validation
---associated models
---model attributes

./cake

Baking TIme
-quick commands for crud
-commands
--select individual
---./cake bake
--pass in the command
---./cake bake model
---./cake bake controller
---./cake bake view
--model, view, controller
---./cake bake all


CREATE TABLE IF NOT EXISTS `categories` (
    `id` INT(10) NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(50) NOT NULL, 
    `length_type` VARCHAR(50) NOT NULL,
    PRIMARY KEY(`id`) 
);

./cake bake model Categories
./cake bake controller Categories
./cake bake template Categories

ALTER TABLE `items` 
ADD `category_id` INT NOT NULL DEFAULT 0,
ADD `created` DATETIME NULL,
ADD `modified` DATETIME NULL

Linking Models Together
-two models
--we now have two models in our application
--currently they are independent, but we need them to be dependent
---item model relies on the Category model
--this is considered a one to many
---there is one category to many items
-four association types
--one to one
--one to many
--many to one
--many to many
-cover three of the four
--one to one, one to many, many to one

One to One association
-variable name: $hasOne
--set the value to the model you are referencing
--example - main model `Cake`
---public $hasOne = 'CakeDetail';
-parent uses this variable
--model names: Cake and CakeDetail
--the main model(Cake) will indicate that it has the ssociation with the other model (CakeDetail)
---Cake can have one CakeDetail

One to Many Association
-variable name: $hasMany
--set the value to the model you are referencing
--example: main model `User`
---public $hasMany = 'Recipe';
-parent uses this variable
--model names: User and Recipe
--the main model (User) will indicate tht it has the association with the other model (Recipe)
---User can have many Recipes

Many to One Association
-compliment setting to the hasOne and hasMany associations
--see the data from the other direction
-variable name: $belongsTo
--set the value to the model that is referencing it
--example: main model 'Cake', currently in 'CakeDetail'
---public $belongsTo = 'Cake';
-child uses this variable
--model names:Cake and CakeDetail
--the child model (CakeDetail) will indicate that it has the association with the "parent" model (Cake)
---CakeDetail belongs to Cake

Detalied Variables
-more control can be given
--each association hs the ability to have more control over the association between two tables
---helpful, especially if the database does not follow the CakePHP naming conventions

class Cake extends AppModel{
    public $hasOne = Array(
        'CakeDetail => array(
            'className' => 'CakeDetail',
            'dependent' => true
        )
    );
}

Has One
-possible keys for $hasOne association array
--className
---name of the model associated to
--foreignKey
---foreign key found in the other model
-other possibilities
--conditions, fields, order, dependent

Has Many
-possible keys for $hasMany association array
--className
---name of the model associated to
--foreignKey
---foreign key found in the other model
-other possibilities
--conditions, order, dependent, exclusive, offset, limit, finderQuery

Belongs Together
-possible keys for $belongsTo association array
--className
---name of the model associated with
--foreignKey
---foreign key in the current model
--type 
---the type of join to use in the SQL query(defaults to LEFT). These are lowercase
--order
---use a standard associated array that is used in the find() query call 
-other possibilities
--conditions, fields, counterCache, counterScope

Model attributes
-Overriding the default model behavior
-beneficial
--more control
--helps with legacy databases
-CakePHP model attributes
--list of most used: models/model-attributes
--review a few of the more used attributes


A few model attributes
-useDbConfig
--specifies the database connection that will be used. Defaults to the `default` datbase connection

-useTable
--specifies the table name. Set this if not adhering to CakePHP naming conventions

-primaryKey
--use this attribute if the primary key is something else besides `id` (CakePHP naming conventions)

-displayField
--specifies which database field should be used as the label. Used in scaffolding and in the find(`list`) calls. Default will use `name` or `title`

-validate
--declares rules that the model uses for validating data

class Item extends AppModel{
    public $useDbConfig = 'live';
    //default
    public $useTable = 'products'
    //items
    public $primaryKey = 'itemID';
    //id
    public $displayField = 'productName';
    //name, title
}

Validation Array
-variable name: $validate
-example: 
    class ModelName extends AppModel{
        public $validate = array();
    }
-the array
--associated array(key, value)
---key = field name
---value = rule name (type of validation to perform)
--rule name
---pre-defined
---list of core validation ruls (ceva link de carte) /models/data-validation.html#core-validation-rules
--example: 
    public $validate =  array('user_email' => 'email');

Validation Options
-list of validation Options
--rules you can use in your data validation
--commonly used validation rules
-validation ruls
--alphaNumeric-alphabetic characters and integers
--between - range of values
--date - date format
--email - email format
--maxLength - max lenght of a value
--minLength - min length of a value
--notEmpty - the field must have some type of value
--numeric - integers only

Detailed Validation
-rule naming array
--each rule name can have its own array of information
--allows for better control over each field validation
--when using this array there are only five keys that can be used
---rule,required,allowEmpty,on,message
--example:
    public $validate = array(
        'fieldName' => array(
            'rule' => 'ruleName',
            'required' => true,
            'allowEmpty' => false,
            'on' => 'create',
            'message' => 'Your Error Message'
        )
    );

5 keys
-rule
--name of the rule you will be using (the `rule` key is required when using the rule array)
--if it isn't set, validation will not be performed on that field
-required
--true/false - makes sure the field is present in the data array
--create/update - makes the field reuqired for either the create or update operation
-allowEmpty
--true/false - if set to false, the field must have some data present
--differs in that the required makes sure the data key (filed) is in the data array
-on
--update/create - allows for a certain validation to be performed if the entry is being created or updated
--default to null, meaning validation will be performed on both the update and create
-message
--custom validation message can be set with this key

Magic Database fields
-modified & created dates 
--if either of these fields are defined in the database table, CakePHP will set the values automatically when an entry is either saved or updated in the database
--each field must be set to the `datetime` field type in the table
---default null
--field names
---modified 
---created
-created
--set to the current date when an entry is added to the database
-modified
--set to the current date when an entry is added to the database
--automatically updated to the current date when the current entry is updated in the database



